# # Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?



def pair_count(array1,end_range,sum):
    m=[0] * 1000
    
    for i in range(0,end_range):
        m[array1[i]] +=1
        
    count = 0
        
    for i in range(0, end_range):
        count += m[sum - array1[i]]
        if (sum - array1[i] == array1[i]):
            count -= 1
    return int(count / 2)

array1 = [4,-1,2,1,8,-4,-2,3,6,5]
end_range = len(array1)
sum = 4
            
print("Count of pairs is", pair_count(array1,end_range, sum)) 




# ## Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array





def Reversing_Array(Array):
    print(Array[::-1])
	

Array = [2,4,5,8,9,10,13,14,15,18,19,20]
print("Reversed Array is --> ",end=" ")
Reversing_Array(Array)





# # Q3. Write a program to check if two strings are a rotation of each other?





def areRotations(string1, string2):
    str1 = len(string1)
    str2 = len(string2)
    temp = ''
    if str1 != str2:
        return 0

    temp = string1 + string1


    if (temp.count(string2)> 0):
        return 1
    else:
        return 0


string1 = "KCPD"
string2 = "CPDK"

if areRotations(string1, string2):
    print ("Strings are rotations of each other")
else:
    print ("Strings are not rotations of each other") 
    
    
    


# # Q4. Write a program to print the first non-repeated character from a string?


NO_OF_CHARS = 256
 
def getCharCountArray(string):
    count = [0] * NO_OF_CHARS
    for i in string:
        count[ord(i)]+= 1
    return count

def firstNonRepeating(string):
    count = getCharCountArray(string)
    index = -1
    k = 0
 
    for i in string:
        if count[ord(i)] == 1:
            index = k
            break
        k += 1
 
    return index
 
string = "oldisgold"
index = firstNonRepeating(string)
if index == 1:
    print ("Either all characters are repeating or string is empty")
else:
    print ("First non-repeating character is" , string[index])




# # Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.





def TowerOfHanoi(n , tower_1, tower_3, tower_2):
    if n == 0:
        return
    TowerOfHanoi(n-1, tower_1, tower_2, tower_3)
    print("Move",n,"disk from tower_1",tower_1," to tower_3",tower_3)
    TowerOfHanoi(n-1, tower_2, tower_3, tower_1)

n = 3
TowerOfHanoi(n, 'A', 'C', 'B')




# # Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.





def isOperator(x):

    if x == "+":
        return True

    if x == "-":
        return True

    if x == "/":
        return True

    if x == "*":
        return True

    return False

# Convert postfix to Prefix expression

def postToPre(post_exp):

    s = []
    length = len(post_exp)
    # reading from right to left
    for i in range(length):
        if (isOperator(post_exp[i])):
            op1 = s[-1]
            s.pop()
            op2 = s[-1]
            s.pop()
            temp = post_exp[i] + op2 + op1
            s.append(temp)
        else:
            s.append(post_exp[i])
    ans = ""
    for i in s:
        ans += i
    return ans

if __name__ == "__main__":
    post_exp = "AB+CD-"
    # Function call
    print("Prefix : ", postToPre(post_exp))


# # Q7.+Write+a+program+to+convert+prefix+expression+to+infix+expression.





def prefixToInfix(prefix):
    stack = []
     
    i = len(prefix) - 1
    while i >= 0:
        if not isOperator(prefix[i]):
             
           
            stack.append(prefix[i])
            i -= 1
        else:
           

            str = "(" + stack.pop() + prefix[i] + stack.pop() + ")"
            stack.append(str)
            i -= 1
     
    return stack.pop()
 
def isOperator(c):
    if c == "*" or c == "+" or c == "-" or c == "/" or c == "^" or c == "(" or c == ")":
        return True
    else:
        return False

if __name__=="__main__":
    str = "*-A/BC-/AKL"
    print(prefixToInfix(str))




# # Q8. Write a program to check if all the brackets are closed in a given code snippet.




def areBracketsBalanced(expr):
    stack = []


    for char in expr:
        if char in ["(", "{", "["]:
            stack.append(char)
        else:

            if not stack:
                return False
            current_char = stack.pop()
            if current_char == '(':
                if char != ")":
                    return False
            if current_char == '{':
                if char != "}":
                    return False
            if current_char == '[':
                if char != "]":
                    return False

    if stack:
        return False
    else:
        return True



if __name__ == "__main__":
    expr = "{()}[]"

    if areBracketsBalanced(expr):
        print("All the brackets are closed")
    else:
        print("Brackets are not closed")




# # Q9. Write a program to reverse a stack.





class Stack:
    def __init__(self):
        self.Elements = []


    def push(self, value):
        self.Elements.append(value)


    def pop(self):
        return self.Elements.pop()

    def empty(self):
        return self.Elements == []

    def show(self):
        for value in reversed(self.Elements):
            print(value)

def BottomInsert(s, value):
    if s.empty():
        s.push(value)
    else:
        popped = s.pop()
        BottomInsert(s, value)
        s.push(popped)
def Reverse(s):
    if s.empty():
        pass
    else:
        popped = s.pop()
        Reverse(s)
        BottomInsert(s, popped)

stk = Stack()

stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)

print("Original Stack")
stk.show()
print("\nStack after Reversing")
Reverse(stk)
stk.show()




# # Q10. Write a program to find the smallest number using a stack.




import math
 
def print_1_Smallest(arr):
 
    arr_size = len(arr)
    if arr_size < 2:
        print ("Invalid Input")
        return
 
    first = second = math.inf
    for i in range(0, arr_size):
 
        if arr[i] < first:
            second = first
            first = arr[i]
 
        elif (arr[i] < second and arr[i] != first):
            second = arr[i];
 
    if (second == math.inf):
        print ("No second smallest element")
    else:
        print ('The smallest element is',first)

arr = [12, 13, 11, 10, 34, 3]
print_1_Smallest(arr)
